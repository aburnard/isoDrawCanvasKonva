{"remainingRequest":"/Users/andrew/code/ModalPlex/modalplex/node_modules/babel-loader/lib/index.js!/Users/andrew/code/ModalPlex/modalplex/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/andrew/code/ModalPlex/modalplex/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andrew/code/ModalPlex/modalplex/src/components/imageLoad.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/andrew/code/ModalPlex/modalplex/src/components/imageLoad.vue","mtime":1574894982889},{"path":"/Users/andrew/code/ModalPlex/modalplex/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrew/code/ModalPlex/modalplex/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/andrew/code/ModalPlex/modalplex/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrew/code/ModalPlex/modalplex/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJpbWFnZUxvYWQiLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpbWFnZURhdGE6ICIiCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgcHJldmlld0ltYWdlOiBmdW5jdGlvbiBwcmV2aWV3SW1hZ2UoZXZlbnQpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vIFJlZmVyZW5jZSB0byB0aGUgRE9NIGlucHV0IGVsZW1lbnQKICAgICAgdmFyIGlucHV0ID0gZXZlbnQudGFyZ2V0OyAvLyBFbnN1cmUgdGhhdCB5b3UgaGF2ZSBhIGZpbGUgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcmVhZCBpdAoKICAgICAgaWYgKGlucHV0LmZpbGVzICYmIGlucHV0LmZpbGVzWzBdKSB7CiAgICAgICAgLy8gY3JlYXRlIGEgbmV3IEZpbGVSZWFkZXIgdG8gcmVhZCB0aGlzIGltYWdlIGFuZCBjb252ZXJ0IHRvIGJhc2U2NCBmb3JtYXQKICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsgLy8gRGVmaW5lIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gcnVuLCB3aGVuIEZpbGVSZWFkZXIgZmluaXNoZXMgaXRzIGpvYgoKICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIC8vIE5vdGU6IGFycm93IGZ1bmN0aW9uIHVzZWQgaGVyZSwgc28gdGhhdCAidGhpcy5pbWFnZURhdGEiIHJlZmVycyB0byB0aGUgaW1hZ2VEYXRhIG9mIFZ1ZSBjb21wb25lbnQKICAgICAgICAgIC8vIFJlYWQgaW1hZ2UgYXMgYmFzZTY0IGFuZCBzZXQgdG8gaW1hZ2VEYXRhCiAgICAgICAgICBfdGhpcy5pbWFnZURhdGEgPSBlLnRhcmdldC5yZXN1bHQ7CgogICAgICAgICAgX3RoaXMuJGVtaXQoImZpbGVJbWFnZSIsIF90aGlzLmltYWdlRGF0YSk7CiAgICAgICAgfTsgLy8gU3RhcnQgdGhlIHJlYWRlciBqb2IgLSByZWFkIGZpbGUgYXMgYSBkYXRhIHVybCAoYmFzZTY0IGZvcm1hdCkKCgogICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGlucHV0LmZpbGVzWzBdKTsKICAgICAgfQogICAgfQogIH0KfTs="},{"version":3,"sources":["imageLoad.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAkBA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,SAAA,EAAA;AADA,KAAA;AAGA,GANA;AAOA,EAAA,OAAA,EAAA;AACA,IAAA,YAAA,EAAA,sBAAA,KAAA,EAAA;AAAA;;AACA;AACA,UAAA,KAAA,GAAA,KAAA,CAAA,MAAA,CAFA,CAGA;;AACA,UAAA,KAAA,CAAA,KAAA,IAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA;AACA;AACA,YAAA,MAAA,GAAA,IAAA,UAAA,EAAA,CAFA,CAGA;;AACA,QAAA,MAAA,CAAA,MAAA,GAAA,UAAA,CAAA,EAAA;AACA;AACA;AACA,UAAA,KAAA,CAAA,SAAA,GAAA,CAAA,CAAA,MAAA,CAAA,MAAA;;AACA,UAAA,KAAA,CAAA,KAAA,CAAA,WAAA,EAAA,KAAA,CAAA,SAAA;AACA,SALA,CAJA,CAUA;;;AACA,QAAA,MAAA,CAAA,aAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA;AACA;AAlBA;AAPA,CAAA","sourcesContent":["<template>\n  <div id=\"imageLoad\">\n    <box class=\"is-fullwidth\">\n      <div>\n        <div class=\"file-upload-form\">\n          Upload an image file:\n          <input type=\"file\" @change=\"previewImage\" accept=\"image/*\" />\n        </div>\n        <div class=\"image-preview\" v-if=\"imageData.length > 0\">\n          <p>inside imageload</p>\n          <img class=\"preview\" :src=\"imageData\" />\n        </div>\n      </div>\n    </box>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"imageLoad\",\n  data() {\n    return {\n      imageData: \"\"\n    };\n  },\n  methods: {\n    previewImage: function(event) {\n      // Reference to the DOM input element\n      var input = event.target;\n      // Ensure that you have a file before attempting to read it\n      if (input.files && input.files[0]) {\n        // create a new FileReader to read this image and convert to base64 format\n        var reader = new FileReader();\n        // Define a callback function to run, when FileReader finishes its job\n        reader.onload = e => {\n          // Note: arrow function used here, so that \"this.imageData\" refers to the imageData of Vue component\n          // Read image as base64 and set to imageData\n          this.imageData = e.target.result;\n          this.$emit(\"fileImage\", this.imageData);\n        };\n        // Start the reader job - read file as a data url (base64 format)\n        reader.readAsDataURL(input.files[0]);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.marge {\n  margin-bottom: -4px;\n}\n</style>"],"sourceRoot":"src/components"}]}